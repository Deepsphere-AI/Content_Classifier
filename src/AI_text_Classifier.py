import streamlit as st
from src.web_Scapper import find_the_input
from src.web_Scapper import get_paragraphs
from src.pdf import header_footer_cuter,without_header_footer_cuter
from src.pdf_textretrive import pdf_text,text_retrive


def Text_Classifier():
    st.markdown("<p style='text-align: center; color: black; font-size:20px;'><span style='font-weight: bold'>Problem Statement: </span>To Classifiy the given Content is generated by Gpt or Human </p>", unsafe_allow_html=True)
    st.markdown("<hr style=height:2.5px;background-color:gray>",unsafe_allow_html=True)
    w1,col1,col2,w2=st.columns((1,1.5,2.5,1))
    w12,col11,col22,w22=st.columns((1,1.5,2.5,1))
    cc2,cc1,cc3=st.columns((1,4,1))
    with col1:
        st.write('# ')
        st.markdown("<p style='text-align: left; color: black; font-size:20px;'><span style='font-weight: bold'>Input Type</span></p>", unsafe_allow_html=True)
    with col2:
        vAR_input = st.selectbox('',['Select','Text input','File format'])

    # Text input
    if vAR_input == 'Text input':
        with col1:
            st.write('# ')
            st.markdown("<p style='text-align: left; color: black; font-size:20px;'><span style='font-weight: bold'>Input Text</span></p>", unsafe_allow_html=True)
        with col2:
            vAR_text = st.text_area('')
            vAR_text = ' '.join(vAR_text.split())
        if vAR_text !="":
            with col2:
                if st.button("Submit"):
                    vAR_response = find_the_input(vAR_text)
                    with col2:
                        st.success(vAR_response)

    # websit input
    elif vAR_input == 'Website URL':
        with col1:
            st.write('# ')
            st.markdown("<p style='text-align: left; color: black; font-size:20px;'><span style='font-weight: bold'>Enter the Website link</span></p>", unsafe_allow_html=True)
        with col2:
            vAR_link = st.text_input('')
        if vAR_link !="":
            vAR_text = get_paragraphs(vAR_link)
            final_text = []
            for i in range (0,len(vAR_text)):
                text = vAR_text[i]
                final_text.append(text)
                vAR_text = ' '.join(final_text.split())
            with col2:
                if st.button("Submit"):
                    vAR_response = find_the_input(final_text)
                    with col2:
                        st.success(vAR_response)
    # files format
    elif vAR_input == 'File format':
        with col1:
            st.write('# ')
            st.markdown("<p style='text-align: left; color: black; font-size:20px;'><span style='font-weight: bold'>Enter File format</span></p>", unsafe_allow_html=True)
        with col2:
            vAR_file_type = st.selectbox("",['Select','Text file','PDF file'])
        
        
        # Text file
        if vAR_file_type == 'Text file':
            with col1:
                st.write('## ')
                st.write('# ')
                st.markdown("<p style='text-align: left; color: black; font-size:20px;'><span style='font-weight: bold'>Upload File Here</span></p>", unsafe_allow_html=True)
            with col2:
                vAR_file = st.file_uploader('',type='txt')
            if vAR_file is not None:
                txt_content = text_retrive(vAR_file)
                txt_content = ' '.join(txt_content.split())
                with col2:
                    if st.button("Submit"):
                        vAR_response = find_the_input(txt_content)
                        with col2:
                            st.success(vAR_response)
        # PDF file
        if vAR_file_type == 'PDF file':
            with col1:
                st.write('## ')
                st.write('# ')
                st.markdown("<p style='text-align: left; color: black; font-size:20px;'><span style='font-weight: bold'>Upload File Here</span></p>", unsafe_allow_html=True)
            with col2:
                vAR_file = st.file_uploader('',type='pdf')
            if vAR_file is not None:
                with col1:
                    st.write('# ')
                    st.write('# ')
                    st.write('# ')
                    st.markdown("<p style='text-align: left; color: black; font-size:20px;'><span style='font-weight: bold'>Remove Header/Footer </span></p>", unsafe_allow_html=True)
                with col2:
                    vAR_remove =st.selectbox('',['Select','Yes','No'])
                if vAR_remove == 'Yes':
                    header_footer_cuter(vAR_file)
                    vAR_pdf_content = pdf_text()
                    vAR_pdf_content = ' '.join(vAR_pdf_content.split())
                    with col2:
                        if st.button("Submit"):
                            vAR_response = find_the_input(vAR_pdf_content)
                            with col2:
                                st.success(vAR_response)
                if vAR_remove == 'No':
                    without_header_footer_cuter(vAR_file)
                    vAR_pdf_content = pdf_text()
                    vAR_pdf_content = ' '.join(vAR_pdf_content.split())
                    with col2:
                        if st.button("Submit"):
                            vAR_response = find_the_input(vAR_pdf_content)
                            with col2:
                                st.success(vAR_response)